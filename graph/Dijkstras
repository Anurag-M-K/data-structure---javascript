- this function should accept a startin g and ending vertex

- create an object  and set each key to be every vertex in the adjecencylist with  a value of infinity, except for the starting verte whivh should have a value of 0;

- after seting a value in the  distance object , add each vertex with a priority of infinity to the priority queue, except the starting vertex, which should have a prority of 0 because thats where we begin.

- create another object called previous and set each key to be every vertex in the adjecencylist with a value of null.

- Start looping as long  as there is anything in the priority queue

- dequeue a vertex from the priority queue
- if that vertex  is the same as the same as the ending vertex - we are done.
- otherwise loop through each value in the adjecency list at that vertex
* calculate the distance to that vertex from the starting vertex
* if the distance is less than what is currently  stored in our distances object
*update  the distances object with new lower distance
* update the previous object to contain that vertex
* enqueue the vertex with the total distance from the start node.
BFS ----steps 

* create a queue  and a variable to store the values of nodes
* place the root node in the queue 
*loop as  long as there is anything in the queue
-dequeue a node from the queue and push the value of the node into the variable that stores the nodes
-if there is left property on the node dequeued - add it to the queue
-if there is a right property on the node queued - add it to the queue
*return the variable that stores the values



DFS Preorder - steps
* create a variable to store the values of nodes visited
*write a helper function which accepts a nodes
-push the values of the node to that stores the values
-if the node has a left property call the helper function with the left property on the node
-if the node has a right property call the helper function with the right property on the node
-invoke the helper function with the current variable
-return the array of values

DFS Postorder steps 

* create a variable to store the values of nodes visited
*write a helper function which accepts a nodes
-if the node has a left property call the helper function with the left property on the node
-if the node has a right property call the helper function with the right property on the node
-push the values of the node to that stores the values
-invoke the helper function with the current variable
-return the array of values

DFSInorder steps

* create a variable to store the values of nodes visited
*write a helper function which accepts a nodes
-if the node has a left property call the helper function with the left property on the node
-push the values of the node to that stores the values
-if the node has a right property call the helper function with the right property on the node
-invoke the helper function with the current variable
-return the array of values
